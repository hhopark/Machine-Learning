"""
텐서는 파이썬에서 3차원 이상의 행렬을 'Tensor'라고 한다.
인공 신경망은 복잡한 모델 내의 연산을 주로 '행렬 연산'을 통해 해결한다.
이 코드에서는 벡터와 행렬, 텐서에 대한 연산에 대해 알아본다.
"""
import numpy as np

d0=np.array(5)
print(d0.ndim) # 스칼라값은 0차원 텐서라고 한다.
print(d0.shape) # 스칼라의 크기를 출력했을때, 0차원 텐서는 크기가 없다고 출력된다.

# 벡터의 차원과 텐서의 차원은 다른 개념이다.
# 아래 코드의 벡터는 4차원이지만, 1차원 텐서이기도하다
# 벡터에서의 차원은 하나의 축(행)에 차원들이 존재하는 것이고,
# 텐서의 차원은 축의 개수이다.
d1=np.array([1,2,3,4])
print(d1.ndim)
print(d1.shape)

# 행과 열이 존재하는 벡터의 배열. 즉, 행렬을 2차원 텐서라고 한다.
d2=np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])
print(d2.ndim)
print(d2.shape)
print(d2)

# 행렬 또는 2차원 텐서를 한 번 더 배열하면 3차원 텐서라고 한다.
# 3차원 이상의 텐서부터 본격적으로 텐서라고 부른다.
# 2개의 큰 데이터가 있는데, 그 각각은 3개의 더 작은 데이터로 구성되며,
# 그 3개의 데이터는 또한 더 작은 5개의 데이터로 구성되어져 있다.
d3=np.array([
            [[1,2,3,4,5], [6,7,8,9,10], [10,11,12,13,14]],
            [[15,16,17,18,19], [19,20,21,22,23], [23,24,25,26,27]]
            ])
print(d3.ndim)
print(d3.shape)
print(d3)

# 행렬의 합과 차는 단순히 +, - 기호로 표현하므로 생략한다.
# 다음은 내적을 나타내는 방법에 대한 코드이다.
a = np.array([1,2,3])
b = np.array([4,5,6])
print(np.dot(a,b)) # np.dot()은 내적을 의미한다.

# 다음은 행렬의 곱을 나타내는 방법이다.
c = np.array([[1,3], [2,4]])
d = np.array([[5,7], [6,8]])
print(np.matmul(a,b)) # matmul()은 행렬의 곱을 의미한다.

"""
샘플(Sample)과 특성(Feature)
샘플은 데이터를 셀 수 있는 단위로 구분(행)
특성은 종속 변수 y를 예측하기 위한 각각의 독립 변수 x이다.
"""

"""
가중치와 편향 행렬의 크기 결정
편향에 해당하는 b는 Y행렬과 크기가 같아야하며
가중치에 해당하는 W는 X행렬의 열을 행으로하며 Y행렬의 열을 열로 가진다.
"""
